[{"title":"YANG语言","url":"/2022/08/09/YANG%E8%AF%AD%E8%A8%80/","content":"<p>​\t\t本文记录了学习SDN过程中涉及的YANG语言的知识点。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Restful和Restconf\"><a href=\"#Restful和Restconf\" class=\"headerlink\" title=\"Restful和Restconf\"></a>Restful和Restconf</h2><ul>\n<li>REST（Representational State Transfer，表述性状态转移）是一种软件设计风格，不是一个标准，许多web是基于REST风格设计的。（1.资源静态，动作清晰；2.无状态设计；3.前后端分离API；）</li>\n<li>Restful接口是遵循REST设计风格的接口，没有标准要求；</li>\n<li>Restconf接口是既遵循REST设计风格，又遵循IETF制定的RFC8040标准的接口，有明确的定义和设计规范，基于HTTP协议，用于访问YANG语言定义的数据。比Netconf语言简洁、灵活。</li>\n</ul>\n<h2 id=\"YANG\"><a href=\"#YANG\" class=\"headerlink\" title=\"YANG\"></a>YANG</h2><h3 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h3><ul>\n<li>schema tree:模式树,data tree:数据树;</li>\n<li>专门用于描述数据的语言;</li>\n<li>YANG语言使用module\\submodule构建数据模型;</li>\n<li>树形结构;</li>\n<li>ODL用YANG抽象数据模型,包括项目YANGTools等;</li>\n</ul>\n<h3 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h3><h4 id=\"YANG有四种数据建模节点类型：leaf、leaf-list、container-、list\"><a href=\"#YANG有四种数据建模节点类型：leaf、leaf-list、container-、list\" class=\"headerlink\" title=\"YANG有四种数据建模节点类型：leaf、leaf-list、container 、list;\"></a>YANG有四种数据建模节点类型：leaf、leaf-list、container 、list;</h4><ul>\n<li><p>leaf：只能包含一个值，没有子节点；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个名字叫host-name的leaf类型的节点</span></span><br><span class=\"line\"><span class=\"comment\">//节点包含string类型的数据</span></span><br><span class=\"line\"><span class=\"comment\">//描述信息是&quot;Hostname for this system&quot;</span></span><br><span class=\"line\">leaf host-name &#123;</span><br><span class=\"line\">type string; <span class=\"comment\">//必选</span></span><br><span class=\"line\">description <span class=\"string\">&quot;Hostname for this system&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>leaf-list：一系列的leaf节点；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一系列leaf节点,这些节点都是用来domain-search的</span></span><br><span class=\"line\">    <span class=\"comment\">//节点都包含string类型数据</span></span><br><span class=\"line\">    <span class=\"comment\">//相当于数组</span></span><br><span class=\"line\">    leaf-list domain-search &#123;</span><br><span class=\"line\">    type string;</span><br><span class=\"line\">    description <span class=\"string\">&quot;List of domain names to search&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>container:没有值,专门用于把相关的节点归纳到一个subtree下面,可以包括任何类型\\任何数量子节点:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//container类型的system节点包含container类型的login节点</span></span><br><span class=\"line\">   <span class=\"comment\">//container类型的login节点把leaf类型 message节点组成了一棵子树</span></span><br><span class=\"line\">   container system &#123;</span><br><span class=\"line\">   \tcontainer login &#123;</span><br><span class=\"line\">   \t\tleaf message &#123;</span><br><span class=\"line\">   \t\t\ttype string;</span><br><span class=\"line\">   \t\t\tdescription<span class=\"string\">&quot;Message given at start of login session&quot;</span>;</span><br><span class=\"line\">   \t\t\t&#125;</span><br><span class=\"line\">   \t\t&#125;</span><br><span class=\"line\">   \t&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>list:由一个key的leaf节点唯一确定,能定义多种key leafs,能包含任意类型\\任意数目子节点:</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//名为user的list,由名为name的leaf节点唯一确定</span></span><br><span class=\"line\">    <span class=\"comment\">//user里面还包括其他leaf</span></span><br><span class=\"line\">    list user &#123;</span><br><span class=\"line\">    key <span class=\"string\">&quot;name&quot;</span>;</span><br><span class=\"line\">    leaf name &#123;</span><br><span class=\"line\">    type string;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    leaf full-name &#123;</span><br><span class=\"line\">    type string;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    leaf class &#123;</span><br><span class=\"line\">    type string;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>上述四种节点可以组成简单的示例module:</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Contents of \\&quot;acme-system.yang\\&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">module</span> acme-system &#123;</span><br><span class=\"line\">    namespace \\<span class=\"string\">&quot;http://acme.example.com/system\\&quot;;</span></span><br><span class=\"line\"><span class=\"string\">    prefix \\&quot;acme\\&quot;;</span></span><br><span class=\"line\"><span class=\"string\">    organization \\&quot;ACME Inc.\\&quot;;</span></span><br><span class=\"line\"><span class=\"string\">    contact \\&quot;joe@acme.example.com\\&quot;;</span></span><br><span class=\"line\"><span class=\"string\">    description</span></span><br><span class=\"line\"><span class=\"string\">    \\&quot;The module for entities implementing the ACME system.\\&quot;;</span></span><br><span class=\"line\"><span class=\"string\">    revision 2007-06-09 &#123;</span></span><br><span class=\"line\"><span class=\"string\">    description \\&quot;Initial revision.\\&quot;;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    container system &#123;</span></span><br><span class=\"line\"><span class=\"string\">    \tleaf host-name &#123;</span></span><br><span class=\"line\"><span class=\"string\">    \ttype string;</span></span><br><span class=\"line\"><span class=\"string\">    \tdescription \\&quot;Hostname for this system\\&quot;;</span></span><br><span class=\"line\"><span class=\"string\">    \t&#125;</span></span><br><span class=\"line\"><span class=\"string\">    \tleaf-list domain-search &#123;</span></span><br><span class=\"line\"><span class=\"string\">    \ttype string;</span></span><br><span class=\"line\"><span class=\"string\">    \tdescription \\&quot;List of domain names to search\\&quot;;</span></span><br><span class=\"line\"><span class=\"string\">    \t&#125;</span></span><br><span class=\"line\"><span class=\"string\">    \tcontainer login &#123;</span></span><br><span class=\"line\"><span class=\"string\">    \t\tleaf message &#123;</span></span><br><span class=\"line\"><span class=\"string\">    \t\ttype string;</span></span><br><span class=\"line\"><span class=\"string\">    \t\tdescription&quot;</span>Message given at start of login session\\<span class=\"string\">&quot;;</span></span><br><span class=\"line\"><span class=\"string\">    \t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">    \t\tlist user &#123;</span></span><br><span class=\"line\"><span class=\"string\">    \t\t\tkey \\&quot;name\\&quot;;</span></span><br><span class=\"line\"><span class=\"string\">    \t\t\tleaf name &#123;</span></span><br><span class=\"line\"><span class=\"string\">    \t\t\ttype string;</span></span><br><span class=\"line\"><span class=\"string\">    \t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">    \t\t\tleaf full-name &#123;</span></span><br><span class=\"line\"><span class=\"string\">    \t\t\ttype string;</span></span><br><span class=\"line\"><span class=\"string\">    \t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">    \t\t\tleaf class &#123;</span></span><br><span class=\"line\"><span class=\"string\">    \t\t\ttype string;</span></span><br><span class=\"line\"><span class=\"string\">    \t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">    \t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">    \t&#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"> &#125;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"YANG能定义RPC-Remote-Procedure-Call-远程过程调用\"><a href=\"#YANG能定义RPC-Remote-Procedure-Call-远程过程调用\" class=\"headerlink\" title=\"YANG能定义RPC(Remote Procedure Call, 远程过程调用);\"></a>YANG能定义RPC(Remote Procedure Call, 远程过程调用);</h4><ul>\n<li><p>定义操作名字，输入参数，和输出参数:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义远程调用activate-software-image</span></span><br><span class=\"line\"><span class=\"comment\">//输入的一个string类型的 image-name</span></span><br><span class=\"line\"><span class=\"comment\">//期望得到一个string类型的输出status</span></span><br><span class=\"line\">rpc activate-software-image &#123;</span><br><span class=\"line\">input &#123;</span><br><span class=\"line\">leaf image-name &#123;</span><br><span class=\"line\">type string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">leaf status &#123;</span><br><span class=\"line\">type string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Helloworld.yang被解读为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//helloworld模块中定义了一次名为hello-world的rpc调用</span></span><br><span class=\"line\"><span class=\"comment\">//输入是string类型的name</span></span><br><span class=\"line\"><span class=\"comment\">//输出是string类型的greeting</span></span><br><span class=\"line\"><span class=\"comment\">//能够与Postman请求的结果对应上</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> helloworld &#123;</span><br><span class=\"line\">    yang-version <span class=\"number\">1.1</span>;</span><br><span class=\"line\">    namespace <span class=\"string\">&quot;urn:opendaylight:params:xml:ns:yang:helloworld&quot;</span>;</span><br><span class=\"line\">    prefix <span class=\"string\">&quot;helloworld&quot;</span>;</span><br><span class=\"line\">    revision <span class=\"string\">&quot;2017-08-30&quot;</span> &#123; <span class=\"comment\">// TODO change revision to date of model creation</span></span><br><span class=\"line\">        description <span class=\"string\">&quot;Initial revision of helloworld model&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    rpc hello-world &#123;</span><br><span class=\"line\">        input &#123;</span><br><span class=\"line\">            leaf name &#123;</span><br><span class=\"line\">                type string;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        output &#123;</span><br><span class=\"line\">            leaf greeting &#123;</span><br><span class=\"line\">                type string;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://cdn.jsdelivr.net/gh/Simonck33420/image/202208081950752.png\" alt=\"image-20220804172512919\" style=\"zoom:50%;\" /></li>\n</ul>\n<h4 id=\"YANG能定义Notification-notifaction是误拼-使用时要注意\"><a href=\"#YANG能定义Notification-notifaction是误拼-使用时要注意\" class=\"headerlink\" title=\"YANG能定义Notification(notifaction是误拼,使用时要注意);\"></a>YANG能定义Notification(notifaction是误拼,使用时要注意);</h4><p>* </p>\n<h3 id=\"YANG在ODL中的实现\"><a href=\"#YANG在ODL中的实现\" class=\"headerlink\" title=\"YANG在ODL中的实现\"></a>YANG在ODL中的实现</h3><h4 id=\"元素命名QName（Qualified-Name，限定名）\"><a href=\"#元素命名QName（Qualified-Name，限定名）\" class=\"headerlink\" title=\"元素命名QName（Qualified Name，限定名）\"></a>元素命名QName（Qualified Name，限定名）</h4><ul>\n<li>来源于XML，格式是命名空间namespace：元素名localName，例：xsl:template</li>\n<li>ODL类似于XML，但多了revision字段，即namespace、localName和revision（修订版本），其中namespace和revision标识一个YANGmodule，可以分为locallocalName和QNameModule</li>\n<li>ODL在org.opendaylight.yangtools.yang.common中定义</li>\n<li>QName由QName、QNameModule与Revision类组成</li>\n<li>QName的比较、创建….</li>\n</ul>\n<h4 id=\"数据树的索引YangInstanceIdentifier\"><a href=\"#数据树的索引YangInstanceIdentifier\" class=\"headerlink\" title=\"数据树的索引YangInstanceIdentifier\"></a>数据树的索引YangInstanceIdentifier</h4><ul>\n<li>YANG中有instance-identifier用来唯一标识数据树中某个节点,ODL用YangInstanceIdentifier类实现</li>\n<li>是一个分层的、基于内容的、唯一的标识符，用来对数据树中数据项的寻址，代表了数据树中某个节点的路径</li>\n<li>语法格式使用的是XPath的简化格式的子集,ODL用Path接口表示,org.opendaylight.yangtools.concepts.Path</li>\n<li>YangInstanceIdentifier类实现Path接口,可以说YangInstance-Identifier类就是表示了数据树中的节点访问路径的定义,org.opendaylight.yangtools.yang.data.api.YangInstanceIdentifier</li>\n<li>YangInstanceIdentifier由PathArgument(路径的参数)组成,一组有序的PathArgument列表构成一条访问路径</li>\n<li>YangInstanceIdentifier的比较、创建….</li>\n</ul>\n<h4 id=\"数据节点抽象定义NomalizedNode\"><a href=\"#数据节点抽象定义NomalizedNode\" class=\"headerlink\" title=\"数据节点抽象定义NomalizedNode\"></a>数据节点抽象定义NomalizedNode</h4><ul>\n<li>NormalizedNode类作为所有数据节点的基础抽象,即定义一个通用的接口来统一表示上述YANG节点类型</li>\n</ul>\n","categories":["SDN"],"tags":["YANG"]},{"title":"OpenDayLight学习笔记","url":"/2022/08/09/OpenDayLight%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"<p>​\t\t本文记录了OpenDayLight的学习过程。</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>工程名字按照建立顺序命名，规则为Project+名称+序号，使用大驼峰模式。例如：ProjectTest1；</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://www.fnedu.com/course/detail/8d46b121-6059-476a-a058-f79636ec41f6/\">OpenDaylight应用开发–基础篇</a></li>\n<li>[ODL技术内幕：架构设计与实现原理](D:\\a研究生资料\\研二\\OpenDayLight\\ODL技术内幕：架构设计与实现原理 (耿兴元) (z-lib.org).epub) </li>\n<li><a href=\"https://mvnrepository.com/\">Maven仓库搜索(一)</a></li>\n<li><a href=\"https://search.maven.org/\">Maven仓库搜索(二)</a></li>\n<li><a href=\"https://github.com/opendaylight\">官方Github</a></li>\n</ul>\n<h2 id=\"获取OpenDayLight项目源码\"><a href=\"#获取OpenDayLight项目源码\" class=\"headerlink\" title=\"获取OpenDayLight项目源码\"></a>获取OpenDayLight项目源码</h2><ul>\n<li><p>下载openflowplugin.zip，在父pom文件下安装到本地</p>\n</li>\n<li><p>&#96;&#96;&#96;java<br>mvn -T 1C clean install -DskipTests -Dskip.karaf.featureTest&#x3D;true -Dmaven.test.skip&#x3D;true -Dcheckstyle.skip&#x3D;true -Dmaven.javadoc.skip&#x3D;true -Dmaven.compile.fork&#x3D;true</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##  新建OpenDayLight项目骨架</span><br><span class=\"line\"></span><br><span class=\"line\">### 软件环境</span><br><span class=\"line\"></span><br><span class=\"line\">- java version &quot;1.8.0_202&quot;</span><br><span class=\"line\">- Apache Maven 3.8.4 (9b656c72d54e5bacbed989b64718c159fe39b537)</span><br><span class=\"line\">- 其它：Postman、VMware、win11、Intellij Idea、cmd…</span><br><span class=\"line\"></span><br><span class=\"line\">### 建空项目</span><br><span class=\"line\"></span><br><span class=\"line\">- 向标准maven的settings.xml添加odlparent settings.xml内容,添加后的内容为[settings-标准版添加odlparentsettings内容.xml](D:\\Maven\\settings-标准版添加odlparentsettings内容.xml);</span><br><span class=\"line\"></span><br><span class=\"line\">- 在E:\\SDN\\OpenDayLight\\ProjectTest1进入cmd，生成项目骨架:</span><br><span class=\"line\"></span><br><span class=\"line\">  ```java</span><br><span class=\"line\">  mvn archetype:generate -DarchetypeGroupId=org.opendaylight.controller -DarchetypeArtifactId=opendaylight-startup-archetype -DarchetypeRepository=http://nexus.opendaylight.org/content/repositories/public/ -DarchetypeCatalog=remote -DarchetypeVersion=1.5.1</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li><p>填写项目信息，填写不当可能导致 <code>Failed to execute goal org.codehaus.mojo:findbugs-maven-plugin:3.0.5:check：</code>错误</p>\n<ul>\n<li>copyright：版权方，填公司名称，不能数字开头；</li>\n<li>copyrightYear、version：默认；</li>\n<li>groupId：团队名称，建议小驼峰模式；</li>\n<li>artifactId：项目名，建议小驼峰模式；</li>\n<li>package、classPrefix：包名、类前缀，建议默认，尤其是classPrefix。</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/Simonck33420/image/202208081944681.png\" alt=\"填写项目信息\" style=\"zoom:50%;\" />\n</li>\n<li><p>项目文件夹名字为artifactId，进入…\\artifactId运行cmd，安装项目到本地:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn clean install -DskipTests -Dmaven.javadoc.skip=<span class=\"literal\">true</span> -Dcheckstyle.skip=<span class=\"literal\">true</span> -e</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://cdn.jsdelivr.net/gh/Simonck33420/image/202208081947108.png\" alt=\"image-20220804145340019\" style=\"zoom:50%;\" />\n\n<img src=\"https://cdn.jsdelivr.net/gh/Simonck33420/image/202208081948328.png\" alt=\"image-20220805145851666\" style=\"zoom:50%;\" /></li>\n</ul>\n<h2 id=\"第一个项目：Helloworld\"><a href=\"#第一个项目：Helloworld\" class=\"headerlink\" title=\"第一个项目：Helloworld\"></a>第一个项目：Helloworld</h2><h3 id=\"参考文献-1\"><a href=\"#参考文献-1\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><ul>\n<li><a href=\"https://blog.csdn.net/qq_26879323\">枫零NET</a>的<a href=\"https://blog.csdn.net/qq_26879323/article/details/124443136\">教程</a>;</li>\n<li><a href=\"https://u-hcy.blog.csdn.net/\">u_hcy2000</a>的博客 <a href=\"https://blog.csdn.net/u_hcy2000/article/details/120745765?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165199780916782184646677%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=165199780916782184646677&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-7-120745765-null-null.nonecase&utm_term=opendaylight&spm=1018.2226.3001.4450\">三、OpenDaylight应用基础开发（ODL的Hello World）</a>;</li>\n<li>耿兴元老师<a href=\"https://www.fnedu.com/course/detail/8d46b121-6059-476a-a058-f79636ec41f6/\">OpenDaylight应用开发–基础篇</a>;</li>\n</ul>\n<h3 id=\"建立项目ProjectHelloworld1\"><a href=\"#建立项目ProjectHelloworld1\" class=\"headerlink\" title=\"建立项目ProjectHelloworld1\"></a>建立项目ProjectHelloworld1</h3><ul>\n<li>生成项目骨架、填写项目信息并安装到本地</li>\n</ul>\n<h3 id=\"功能实现\"><a href=\"#功能实现\" class=\"headerlink\" title=\"功能实现\"></a>功能实现</h3><ul>\n<li><p>定义YANG文件: 在&#x2F;api&#x2F;src&#x2F;main&#x2F;yang下helloworld.yang文件module{}中添加:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpc hello-world &#123;</span><br><span class=\"line\">    input &#123;</span><br><span class=\"line\">        leaf name &#123;</span><br><span class=\"line\">            type string;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    output &#123;</span><br><span class=\"line\">        leaf greeting &#123;</span><br><span class=\"line\">            type string;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重新安装项目到本地,上述yang模型会在api&#x2F;target&#x2F;generated-sources&#x2F;mdsal-binding&#x2F;org.opendaylight.yang. gen.v1.utn.opendaylight.params.xml.ns.yang.&lt;项目名&gt;.rev&lt;数字&gt;下生成数个类和接口.</p>\n<img src=\"https://cdn.jsdelivr.net/gh/Simonck33420/image/202208081949970.png\" alt=\"image-20220804154325994\" style=\"zoom:50%;\" />\n</li>\n<li><p>进入impl&#x2F;src&#x2F;main&#x2F;java&#x2F;networkGroup&#x2F;impl&#x2F;HelloworldProvider.java下实现代码;</p>\n</li>\n<li><p>进入impl&#x2F;src&#x2F;main&#x2F;resources&#x2F;org&#x2F;opendaylight&#x2F;blueprint&#x2F;impl-blueprint.xml,在<code>&lt;blueprint&gt;&lt;/blueprint&gt;</code>中添加<code>&lt;odl:rpc-implementation ref=&quot;provider&quot;/&gt;</code>;</p>\n</li>\n<li><p>重新安装项目,运行E:\\SDN\\OpenDayLight\\ProjectHelloworld1\\helloworld\\karaf\\target\\assembly\\bin\\karaf.bat;</p>\n</li>\n<li><p>使用Postman，POST方式调用 <a href=\"http://localhost:8181/restconf/operations/helloworld:hello-world%EF%BC%9B\">http://localhost:8181/restconf/operations/helloworld:hello-world；</a></p>\n<img src=\"https://cdn.jsdelivr.net/gh/Simonck33420/image/202208081949640.png\" alt=\"image-20220804172512919\" style=\"zoom:50%;\" /></li>\n</ul>\n<h3 id=\"项目分析\"><a href=\"#项目分析\" class=\"headerlink\" title=\"项目分析\"></a>项目分析</h3><p>​\t\tHelloworld作为OpenDayLight入门的第一个项目，使用了RPC机制来实现功能，需要理解的内容包括：</p>\n<ul>\n<li><p>YANG模型和自动生成的工具类、工具接口的对应关系:</p>\n<img src=\"https://cdn.jsdelivr.net/gh/Simonck33420/image/202208081949272.png\" alt=\"image-20220805090638110\" style=\"zoom:67%;\" />\n</li>\n<li><p>是哪些代码实现了读取数据和发送数据的:</p>\n<img src=\"https://cdn.jsdelivr.net/gh/Simonck33420/image/202208081949121.png\" alt=\"image-20220805132457469\" style=\"zoom:33%;\" />\n</li>\n<li><p>blueprint是OSGI规范的一部分,ODL使用Apache Blueprint，是XML。</p>\n<table>\n<thead>\n<tr>\n<th>元素</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bean</td>\n<td>描述创建Java实例的元素，可以指定实例初始化的类名、构造方法、构造方法的入参及属性</td>\n</tr>\n<tr>\n<td>service</td>\n<td>将bean发布为OSGi Service</td>\n</tr>\n<tr>\n<td>reference</td>\n<td>通过接口名引用一个OSGi Service，可以指定一个特定的属性过滤器</td>\n</tr>\n<tr>\n<td>reference-list</td>\n<td>通过接口名引用多个OSGi Service，可以指定一个特定的属性过滤器</td>\n</tr>\n</tbody></table>\n<p>Global RPC、Routed RPC、Notification的订阅、注册、获取都在blueprint操作。</p>\n</li>\n</ul>\n<h2 id=\"RPC：Remote-Procedure-Call\"><a href=\"#RPC：Remote-Procedure-Call\" class=\"headerlink\" title=\"RPC：Remote Procedure Call\"></a>RPC：Remote Procedure Call</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><ul>\n<li><p>RPC有两类：Global RPC和Routed RPC</p>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th>区别</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Global RPC</td>\n<td>一个节点上只有一个RPC实例会被调用，注册多个实例时第一个注册的生效</td>\n</tr>\n<tr>\n<td>Routed RPC</td>\n<td>通过不同的RoutedId可以调用不同的RPC实例</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>如何理解ODL中的RPC：<strong>异步</strong>的响应模式，<strong>单播</strong>关系</p>\n</li>\n</ul>\n<h3 id=\"LLDP2Controller\"><a href=\"#LLDP2Controller\" class=\"headerlink\" title=\"LLDP2Controller\"></a>LLDP2Controller</h3><p>​\t\t想通过RPC调用openflowplugin项目提供的下发流表功能实现上送LLDP报文到控制器的操作，该功能涉及配置POM文件、获取RPC、注册RPC等内容,在Helloworld项目基础上实现.</p>\n<ul>\n<li><p>把openflowplugin项目依赖进来,在impl&#x2F;pom.xml下<code>&lt;dependencyManagement&gt;&lt;/dependencyManagement&gt;</code>中添加openflowplugin-artifacts</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.opendaylight.openflowplugin&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;openflowplugin-artifacts&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">0.6</span><span class=\"number\">.1</span>&lt;/version&gt;</span><br><span class=\"line\">    &lt;type&gt;pom&lt;/type&gt;</span><br><span class=\"line\">    &lt;scope&gt;<span class=\"keyword\">import</span>&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过blueprint调用SalFlowService中的add-flow rpc,Global RPC和Routed RPC的获取方式相同：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//都是用rpc-service标签</span></span><br><span class=\"line\"><span class=\"comment\">//add-flow rpc找到了,但是为什么调用Id是&quot;flowService&quot;?找不到?</span></span><br><span class=\"line\">&lt;odl:rpc-service id=<span class=\"string\">&quot;flowService&quot;</span> interface=<span class=\"string\">&quot;org.opendaylight.yang.gen.v1.urn.opendaylight.flow.service.rev130819.SalFlowService&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建立一个新的bean,规定类的组成:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;bean id=<span class=\"string\">&quot;LLDPToControllerFlowWriter&quot;</span></span><br><span class=\"line\">        class=<span class=\"string\">&quot;networkGroup.impl.LLDPToControllerFlowWriter&quot;</span></span><br><span class=\"line\">        init-method=<span class=\"string\">&quot;init&quot;</span> destroy-method=<span class=\"string\">&quot;close&quot;</span>&gt;</span><br><span class=\"line\">    &lt;argument ref=<span class=\"string\">&quot;dataBroker&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;argument ref=<span class=\"string\">&quot;flowService&quot;</span> /&gt;</span><br><span class=\"line\">  &lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在impl&#x2F;pom.xml下<code>&lt;dependencies&gt;&lt;/dependencies&gt;</code>添加bundle依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">&lt;groupId&gt;org.opendaylight.openflowplugin&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;openflowplugin-api&lt;/artifactId&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;org.opendaylight.openflowplugin&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;openflowplugin-common&lt;/artifactId&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;org.opendaylight.controller.model&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;model-inventory&lt;/artifactId&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;org.opendaylight.openflowplugin.model&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;model-flow-service&lt;/artifactId&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在impl下新建java类.LLDPToControllerFlowWriter</p>\n</li>\n</ul>\n<p>​    </p>\n","categories":["SDN"],"tags":["ODL"]},{"title":"工具Utils","url":"/2022/08/09/%E5%B7%A5%E5%85%B7Utils/","content":"<p>​\t\t本文记录了软件学习过程中用到的工具类知识点，比如数据交换格式、软件安装、环境配置等。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><ul>\n<li>[[图灵程序设计丛书].JSON必知必会](<a href=\"https://pan.baidu.com/s/1UoHP8BiumEt70aSVyhv7dQ\">https://pan.baidu.com/s/1UoHP8BiumEt70aSVyhv7dQ</a><br>提取码：3ir5 )：基础语法1-4章</li>\n</ul>\n<h2 id=\"XML\"><a href=\"#XML\" class=\"headerlink\" title=\"XML\"></a>XML</h2><ul>\n<li>[XML入门经典（第5版）](<a href=\"https://pan.baidu.com/s/1l8uOjScZA3tFntH4UTZi-A\">https://pan.baidu.com/s/1l8uOjScZA3tFntH4UTZi-A</a><br>提取码：gmy9 )</li>\n<li>[XML基础教程（第二版）](<a href=\"https://pan.baidu.com/s/1PLCv0MfDOhE7eYo9OXAykg\">https://pan.baidu.com/s/1PLCv0MfDOhE7eYo9OXAykg</a><br>提取码：qqxx [)</li>\n<li><a href=\"https://www.w3school.com.cn/xml/index.asp\">W3school:xml</a></li>\n</ul>\n<h2 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h2><ul>\n<li>[动力节点：maven入门](<a href=\"https://pan.baidu.com/s/10avLNviwoYM7id_1OAQwPQ\">https://pan.baidu.com/s/10avLNviwoYM7id_1OAQwPQ</a><br>提取码：y6no [)</li>\n<li><a href=\"https://www.bilibili.com/video/BV1x5411P7Hh?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=5ed422835abe3c8a0d5cba4a4b31a5e6\">动力节点：maven视频</a></li>\n</ul>\n<h2 id=\"…\"><a href=\"#…\" class=\"headerlink\" title=\"…\"></a>…</h2>","categories":["工具"],"tags":["Utils"]}]